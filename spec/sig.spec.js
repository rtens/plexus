import test from 'ava'
import Sig from '../src/sig.js'

test('null', t => {
  const sig = Sig.from(null)
  t.true(sig.is(null))
  t.true(sig.is(undefined))
  t.false(sig.is(0))
  t.true(sig.is(''))
  t.true(sig.is([]))
  t.true(sig.is({}))
  t.true(sig.is_none())
  t.false(sig.is_one())
  t.false(sig.is_many())
  t.is(sig.string(), '')
  t.is(sig.number(), 0)
  t.true(sig.at(0).is_none())
  t.true(sig.get('any').is_none())
})

test('empty string', t => {
  const sig = Sig.from('')
  t.true(sig.is(null))
  t.false(sig.is(0))
  t.true(sig.is(''))
  t.true(sig.is([]))
  t.true(sig.is_none())
  t.false(sig.is_one())
  t.false(sig.is_many())
  t.is(sig.string(), '')
  t.is(sig.number(), 0)
  t.true(sig.at(0).is_none())
  t.true(sig.get('any').is_none())
})

test('string', t => {
  const sig = Sig.from('foo')
  t.false(sig.is(null))
  t.true(sig.is(6713199))
  t.true(sig.is('foo'))
  t.true(sig.is('666f6f', 'hex'))
  t.false(sig.is('bar'))
  t.true(sig.is_one())
  t.is(sig.string(), 'foo')
  t.is(sig.number(), 6713199)
  t.is(sig.at(0).string(), 'f')
  t.is(sig.at(0).number(), 102)
  t.is(sig.at(1).string(), 'o')
  t.is(sig.at(2).string(), 'o')
  t.true(sig.at(3).is_none())
  t.true(sig.get('any').is_none())
})

test('number', t => {
  const sig = Sig.from(6713199)
  t.true(sig.is('666f6f', 'hex'))
  t.true(sig.is(6713199))
  t.true(sig.is_one())
  t.is(sig.string(), 'foo')
  t.is(sig.number(), 6713199)
  t.is(sig.at(0).string(), 'f')
  t.is(sig.at(0).number(), 102)
  t.true(sig.get('any').is_none())
})

test('small number', t => {
  t.true(Sig.from(1).is(1))
  t.is(Sig.from('01', 'hex').string('hex'), '01')
  t.is(Sig.from(1).string('hex'), '01')
  t.true(Sig.from('01', 'hex').is(1))
  t.true(Sig.from(1).is('01', 'hex'))
})

test('hex', t => {
  const sig = Sig.from('666f6f', 'hex')
  t.true(sig.is('666f6f', 'hex'))
  t.true(sig.is(6713199))
  t.true(sig.is_one())
  t.is(sig.string('hex'), '666f6f')
  t.is(sig.string(), 'foo')
  t.is(sig.number(), 6713199)
  t.is(sig.at(0).string(), 'f')
  t.is(sig.at(0).number(), 102)
  t.true(sig.get('any').is_none())
})

test('empty list', t => {
  const sig = Sig.from([])
  t.true(sig.is(null))
  t.false(sig.is(0))
  t.true(sig.is(''))
  t.true(sig.is([]))
  t.true(sig.is({}))
  t.true(sig.is_none())
  t.false(sig.is_one())
  t.false(sig.is_many())
  t.is(sig.string(), '')
  t.is(sig.number(), 0)
  t.true(sig.at(0).is_none())
})

test('list', t => {
  const sig = Sig.from(['foo', ['bar'], 'one', []])
  t.true(sig.is(['foo', ['bar'], 'one', []]))
  t.false(sig.is(['foo']))
  t.false(sig.is_none())
  t.false(sig.is_one())
  t.true(sig.is_many())
  t.is(sig.string(), '')
  t.is(sig.number(), 0)
  t.is(sig.at(0).string(), 'foo')
  t.is(sig.at(1).at(0).string(), 'bar')
  t.is(sig.get('foo').at(0).string(), 'bar')
  t.true(sig.get('one').is_none())
})

test('empty object', t => {
  const sig = Sig.from({})
  t.true(sig.is(null))
  t.false(sig.is(0))
  t.true(sig.is(''))
  t.true(sig.is([]))
  t.true(sig.is({}))
  t.true(sig.is_none())
  t.false(sig.is_one())
  t.false(sig.is_many())
  t.is(sig.string(), '')
  t.is(sig.number(), 0)
  t.true(sig.at(0).is_none())
  t.true(sig.get('foo').is_none())
})

test('object', t => {
  const sig = Sig.from({ foo: 'bar', bar: 42 })
  t.true(sig.is({ foo: 'bar', bar: 42 }))
  t.true(sig.is(['foo', 'bar', 'bar', 42]))
  t.false(sig.is_none())
  t.false(sig.is_one())
  t.true(sig.is_many())
  t.is(sig.string(), '')
  t.is(sig.number(), 0)
  t.is(sig.at(0).string(), 'foo')
  t.is(sig.at(1).string(), 'bar')
  t.is(sig.at(2).string(), 'bar')
  t.is(sig.at(3).number(), 42)
  t.is(sig.get('foo').string(), 'bar')
  t.is(sig.get('bar').number(), 42)
  t.true(sig.get('any').is_none())
})
